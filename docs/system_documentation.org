* QFieldCloud System Documentation
  The aim of this document is to provide an overview of the system to
  understand the underlaying logic and technology.
** Architecture
   [[./assets/images/architecture.png]]
** Data model
   [[./assets/images/db_model.png]]
** Statuses
   Returned statuses
*** /deltas/ API
    | Status             | Db value | Meaning                                                   |
    |--------------------+----------+-----------------------------------------------------------|
    | STATUS_PENDING     |        1 | delta has been received, but have not started application |
    | STATUS_BUSY        |        2 | currently being applied                                   |
    | STATUS_APPLIED     |        3 | applied correctly                                         |
    | STATUS_CONFLICT    |        4 | needs conflict resolution                                 |
    | STATUS_NOT_APPLIED |        5 | not applied                                               |
    | STATUS_ERROR       |        6 | unexpected error                                          |
*** /qfield-files/ API
    | Status          | Db value | Meaning                                        |
    |-----------------+----------+------------------------------------------------|
    | STATUS_PENDING  |        1 | Export has been requested, but not yet started |
    | STATUS_BUSY     |        2 | Currently being exported                       |
    | STATUS_EXPORTED |        3 | Export finished                                |
    | STATUS_ERROR    |        4 | was not possible to export the project         |
** Actors
*** Client (QField or other clients)
    The features are:
    - Download QFieldCloud project
    - Edit QFieldCloud project's data
    - Synchronize data with QFieldCloud
*** Desktop (QGIS + QFieldSync)
    Features:
    - Create QGIS project
    - Configure layer actions
    - Upload QGIS project and related files
    - Edit QGIS project
*** Server (QFieldCloud + QGIS + `libqfieldsync`)
    Features:
    - Create QFieldCloud project
    - Create QFieldCloud users and organizations
    - Store QGIS project and related files in QFieldCloud project
    - Allow to download QFieldCloud project included the offline or
      hybrid data package
    - Apply diff files to the original data
*** Web
    - To be defined
** Entities and Concepts
*** QGIS Project
    A QGIS project is a =.qgs= or =.qgz= file. A Project is created on
    QGIS Desktop and uploaded to QFieldCloud using the QGIS's plugin
    QFieldSync. Before the uploading of the QGIS project, it is
    necessary for each layer of the QGIS project an "action" that
    determines how QFieldSync and QField should treat the layer.
    There are the two types of actions that can be setup - one for
    QFieldCloud and one for the traditional cable export.

    This information is saved within the QGS project as layer's
    =customProperty=, with the =QFieldSync/action= key.

    The available actions are:
    | Action internal name | Name showed in the UI |
    |----------------------+-----------------------|
    | OFFLINE              | Consolidate           |
    | NO_ACTION            | Live layer            |
    | REMOVE               | Ignore layer          |
    | COPY                 | Copy                  |
    | KEEP_EXISTING        | Keep Existing         |

    This would be the behavior of QFieldSync with the different
    layer actions:
    | Action        | File based layer                                                     | Not file based layer                                      |
    |---------------+----------------------------------------------------------------------+-----------------------------------------------------------|
    | OFFLINE       | Create a consolidated copy of the data                               | Create a consolidated copy of the data                    |
    | NO_ACTION     | N/A                                                                  | No action on the layer                                    |
    | REMOVE        | Remove the layer from the project                                    | Remove the layer from the project                         |
    | COPY          | Make source path relative and copy the file                          | N/A                                                       |
    | KEEP_EXISTING | Make source path relative and copy the file if it does not exist     | N/A                                                       |

    This is the behavior of QFieldCloud (`libqfieldsync`) with the
    layers:
    | Action          | File based layer                                                                                                 | Not file based                                                                                 |
    |-----------------+------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------|
    | OFFLINE         | Create consolidated copy of the data on pull, apply delta file on push to original data source                   | Create consolidated copy of the data on pull, apply delta file on push to original data source |
    | NO_ACTION       | N/A                                                                                                              | No action on the layer                                                                         |
    | REMOVE          | Remove the layer from the project                                                                                | Remove the layer from the project                                                              |
    | COPY            | Make source path relative and create copy of the data on pull, apply delta file on push to original data source  | N/A                                                                                            |
    | KEEP_EXISTING   | Make source path relative and create copy of the data on pull, apply delta file on push to original data source  | N/A                                                                                            |

    This is the behavior of QField with the layers:
    | Action          | File based layer                     | Not file based layer                       |
    |-----------------+--------------------------------------+--------------------------------------------|
    | OFFLINE         | Create and push deltafile            | N/A (it's always file based at this point) |
    | NO_ACTION       | N/A                                  | Edit the online (live) database            |
    | REMOVE          | N/A (the layer is no longer there)   | N/A (the layer is no longer there)         |
    | COPY            | Create and push deltafile            | N/A                                        |
    | KEEP_EXISTING   | Create and push deltafile            | N/A                                        |

    In summary, for with QFieldCloud:
    - =NO_ACTION= is used for online layers that are located on a server
      accessible via the Internet and that are modified directly by
      QField.
    - =HYBRID= means that a geopackage will be generated on the
      server (or directly on the desktop for file-based layers) and
      downloaded by clients. The client will generate deltafiles of
      the changes.
    - =OFFLINE= is used for example to work with local databases not
      visible by QFieldCloud which are consolidated before being
      loaded from the desktop to the server and are not synchronized
      with the original data by QFieldCloud.
    - =REMOVE= will simply remove the layer from the project.
    - =KEEP_EXISTENT= will not be used for QFieldCloud syncronizations.

    From QFieldSync it will be possible to update a project already
    loaded on QFieldCloud. In the event that the changes concern only
    styles, forms etc. but not the structure of the layers, the
    project on the server will simply be updated.
    If there are changes in the layers structure, the project will be
    reset on the server (delta files will be deleted) and for each
    client it will be necessary to download the updated version of the
    project before being able to push new changes.
*** QFieldCloud Project
    Is composed of one and only one QGIS project and the possible
    related files (e.g. geopackages, images, ...) included the offline
    or hybrid data package.
*** Diff files
*** APIs
  The autogenerated REST API documentation is available on http://dev.qfield.cloud/swagger/
*** Synchronization
*** Permissions
*** Remote datasources credentials
** Use Cases
*** Hybrid
   *Hybrid editing mode with synchronization on the server*
   [[./assets/images/hybrid-schema.png]]

    - Alice creates on her desktop a QGIS project with a layer using
      a remote database as datasource
    - She configures the layer action in QFieldSync as HYBRID
    - Using the QFieldSync interface she creates a project on
      QFieldCloud
      - API =POST /projects/{owner}/=
    - Using the QFieldSync interface she uploads the project to
      QFieldCloud
      - API =POST /files​/{projectid}​/{filename}​/= that pushes
        one file at a time
      - [ ] It is not better to load them all together so we can check
        if the project is correct (e.g. if the remote connections
        work, but we need credentials).
    - Bob using QField, looks at available projects on the "Open cloud
      project"
      - API =GET /projects/=
    - He selects and open Alice's project
      - QField will ask for a list of the project's files with the API
        =GET ​/files​/{projectid}​/= and downloads all the files
        one after the other with the API =GET
        /files​/{projectid}​/{filename}​/=
      - QFieldCloud uses `libqfieldsync` to parse the QGIS project
        and generate any needed data file (i.e. consolidated data of
        the hybrid layer based on a remote server)
        - [ ] To do this `libqfieldsync` needs to know the
          credential of the user to connect to the db, so we need to
          pass them in the API call for each concerned layer and
          probably we also need an API to list the layers and the
          actions of the QGIS project so QField knows which layers
          need the credentials.
    - Bob opens the project and goes to the field to collect new data
      - QField will store a deltafile with the changes to the hybrid
        layer.
      - [ ] But QField also write the geopackage?
    - Bob is in a place with mobile network connection and press the
      button to synchronize the project on the server.
      - QField will send the deltafile to QFieldCloud
        - [ ] API?
        - QFieldCloud using `libqfieldsync` will apply the deltafile
          to the original datasource
        - QField downloads a fresh version of the data geopackage with
          the deltafile applied.
*** Offline database
   *Offline editing mode with desktop synchronization*
   [[./assets/images/offline-schema.png]]

    - Alice creates a QGIS project with a layer using a local database
      as datasource
    - She configures the layer action in QFieldSync as OFFLINE
    - Using the QFieldSync interface she creates a project on
      QFieldCloud
      - API =POST /projects/{owner}/=
    - Using the QFieldSync interface she uploads the project to
      QFieldCloud
      - API =POST /files​/{projectid}​/{filename}​/= that pushes
        one file at a time
      - [ ] It is not better to load them all together so we can check
        if the project is correct (e.g. if the remote connections
        work, but we need credentials).
    - Bob using QField, looks at available projects on the "Open cloud
      project"
      - API =GET /projects/=
    - He selects and open Alice's project
      - QField will ask for a list of the project's files with the API
        =GET ​/files​/{projectid}​/= and downloads all the files
        one after the other with the API =GET
        /files​/{projectid}​/{filename}​/=
*** Offline data file
    - Alice creates a QGIS project with a layer using a local
      geopackage as datasource
    - She configures the layer action in QFieldSync as OFFLINE
*** Live layer
    - Alice creates a QGIS project a layer using a remote database as
      datasource
    - She configures the layer action in QFieldSync as NO_ACTION
