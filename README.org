* Repository of QFieldcloud server
** Test instance
   A test instance is running on http://dev.qfield.cloud (78.47.109.156)
   The autogenerated REST API documentation is available on http://dev.qfield.cloud/docs
   A useful example on how to use the APIs is the [[https://github.com/opengisch/qfieldcloud/blob/master/web-app/qfieldcloud/apps/api/tests/test_functional.py][functional test]]
** Infrastructure
   Based on this example
   https://testdriven.io/blog/dockerizing-django-with-postgres-gunicorn-and-nginx/
*** Development
    To build development images and run the containers:
    #+begin_src sh
      docker-compose up -d --build
    #+end_src

    It will read =docker-compose.yml= and =.env.dev= and start a
    django built-in server at http://localhost:8000

    To run django commands on the docker, enter in the docker bash or
    place =docker-compose run web= before the command, e.g.:
    #+begin_src sh
      docker-compose run web python manage.py runserver
    #+end_src

    To run the tests:
    #+begin_src sh
      docker-compose run web python manage.py test qfieldcloud.apps.api.tests
    #+end_src
    replacing `qfieldcloud.apps.api.tests` with the desired test module
**** Demo data
     Demo data are loaded with:
     #+begin_src sh
       python manage.py loaddata qfieldcloud/apps/model/fixtures/demo_data.json
     #+end_src

     Initial demo data:
     - superuser
       - username: demo_admin
       - password: demo_pwd
     - normal user
       - username: demo_user
       - password: demo_pwd
     - project
       - project name: demo_project
*** Production
    To build production images and run the containers:
    #+begin_src sh
      docker-compose -f docker-compose.prod.yml up -d --build
    #+end_src

    It will read =docker-compose.prod.yml=, =.env.prod= and
    =.env.prod.db= and start a nginx server at http://localhost:1337

    Prod has no mounted folders. To apply changes, the image must be
    re-built.

    To collect static images:
    #+begin_src sh
      docker-compose -f docker-compose.prod.yml exec web python manage.py collectstatic --no-input --clear
    #+end_src

    To run a Django migration on db:
    #+begin_src sh
      docker-compose -f docker-compose.prod.yml exec web python manage.py migrate --noinput
    #+end_src

    To create a Django superuser
    #+begin_src sh
      docker-compose -f docker-compose.prod.yml exec web python manage.py createsuperuser
    #+end_src

** Technological stack
*** Django
    LTS (2.2)
*** Django REST framework
*** Python "official" docker image
    https://hub.docker.com/_/python
    =3.8-buster=
    See [[https://pythonspeed.com/articles/base-image-python-docker-images/][here]] why not use the alpine-based one.
*** Postgres
    https://hub.docker.com/_/postgres

    By docker "official" image =11=, I still don't use the 12 because
    of some incompatibilites with QGIS (at the moment)
*** Nginx
    Docker =1.17.5-alpine=
*** Gunicorn
    =19.9.0=
** Data model and entities
*** User
    Organization is a user with type organization
    | Name       | Type   | Req. | Description              |
    |------------+--------+------+--------------------------|
    | id         | int    | t    | django auto generated id |
    | username   | string | t    | username                 |
    | password   | string | t    |                          |
    | type       | int    | t    | user / organization      |
    | email      | string |      | email adress             |
    | created_at | date   | auto |                          |
    | updated_at | date   | auto |                          |
*** Project
    A project represent the repository of the user's files
    A project can have only one QGIS project inside (qgs or qgz)

    | Name        | Type    | Req. | Description                                 |
    |-------------+---------+------+---------------------------------------------|
    | name        | string  | t    | name of the project                         |
    | description | string  |      | short description of the project            |
    | homepage    | string  |      | URL with more information about the project |
    | private     | boolean |      | Default: false                              |
    | owner       | FK      | t    | user / organization                         |
    | created_at  | date    | auto |                                             |
    | updated_ad  | date    | auto |                                             |
*** Project roles (collaborators)
    | Name    | Type | Req. | Description   |
    |---------+------+------+---------------|
    | user    | FK   | t    | FK on User    |
    | project | FK   | t    | FK on Project |
    | role    | int  | t    |               |

    A collaborator of an normal user project can only be reporter or
    reader. Editor or manager can only be set to an organization's project.
**** Roles
    A higher role always include also the lowest ones

    | Name     | Description                                                                                |
    |----------+--------------------------------------------------------------------------------------------|
    | admin    | The owner of a project is always admin of the project. He can add and remove collaborators |
    | manager  | Can add or remove collaborators                                                            |
    | editor   | Can edit data                                                                              |
    | reporter | Can only insert data (no update nor delete). (Don't have to be a collaborator?)            |
    | reader   | Can read data. (Don't have to be a collaborator?)                                          |
*** Organization roles (members)
    | Name         | Type | Req. | Description |
    |--------------+------+------+-------------|
    | user         | FK   | t    | FK on User  |
    | organization | FK   | t    | FK on User  |
    | role         | int  | t    |             |
**** Roles
    A higher role always include also the lowest ones

    | Name    | Description                                                        |
    |---------+--------------------------------------------------------------------|
    | admin   | She can add and remove members and create project                  |
    | member  | (difference compared to an other user is for billing reasons only) |
** File and directory structure
   | Path                         | Description                        |
   |------------------------------+------------------------------------|
   | =.=                          | Repository root                    |
   | =¦-- web-app=                | Root of all the django code        |
   | =¦   ¦--qfieldcloud=         | Django project                     |
   | =¦      ¦--model=            | Django app with the model          |
   | =¦      ¦--api=              | Django app with the rest API views |
   | =¦      ¦--web=              | Django app with the web views      |

