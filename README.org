* QFieldCloud server
[[./docs/assets/images/logo.png]]
[[https://github.com/opengisch/qfieldcloud/workflows/Deploy%20on%20dev.qfield.cloud/badge.svg]]
[[https://github.com/opengisch/status.qfield.cloud/workflows/dev.qfield.cloud%20APIs%20status/badge.svg]]
[[https://github.com/opengisch/status.qfield.cloud/workflows/app.qfield.cloud%20APIs%20status/badge.svg]]
** Purpose
   QFieldCloud is a service designed to synchronize projects and data
   between QGIS (+ QFieldSync plugin) and QField.

   Initially it will allow to replace the use of the cable to copy
   projects in QField and later it will also allow to synchronize data
   and view and edit projects via web interface.

   System documentation is [[https://github.com/opengisch/qfieldcloud/blob/master/docs/system_documentation.org][here]]
** Development
*** Launch a local instance
    To build development images and run the containers:
    #+begin_src sh
      docker-compose up -d --build
    #+end_src

    It will read =docker-compose.yml= and =.env.dev= and start a
    django built-in server at =http://localhost:8000=

    To run django commands on the docker, enter in the docker bash or
    place =docker-compose run web= before the command, e.g.:
    #+begin_src sh
      docker-compose run web python manage.py runserver
    #+end_src

    To lauch the Flask application that acts as orchestrator for the
    QGIS containers:
    #+begin_src sh
      cd orchestrator
      pipenv run gunicorn -b 0.0.0.0:5000 "orchestrator:app"
    #+end_src
*** Code structure
**** Django apps
     The Django code is structured in 3 separate apps. One app for the
     REST API views, one for the data model and one for the views and
     web templates. 

     This structure has been decided to allow, in the future, to
     logically add other apps (e.g. webgis) that refer to the same
     data model and easily remove the web app if we decide to
     implement the web interface externally to Django.

     | Path                         | Description                        |
     |------------------------------+------------------------------------|
     | =.=                          | Repository root                    |
     | =¦-- web-app=                | Root of all the django code        |
     | =¦   ¦--qfieldcloud=         | Django project                     |
     | =¦   ¦   ¦--apps/model=      | Django app with the data model     |
     | =¦   ¦   ¦--apps/api=        | Django app with the REST API views |
     | =¦   ¦   ¦--apps/web=        | Django app with the web views      |
     | =¦   ¦--user_projects_files= | Repository of the users files      |
*** Tests
    To run all the unit and functional tests (on a throwaway test
    database and a throwaway test storage directory):
    #+begin_src sh
      docker-compose run web python manage.py test
    #+end_src
    
    To run only a test module (e.g. =test_permission.py=)
    #+begin_src sh
      docker-compose run web python manage.py test qfieldcloud.apps.api.tests.test_permission
    #+end_src
*** Demo data
    Demo data are loaded with:
    #+begin_src sh
      python manage.py loaddata qfieldcloud/apps/model/fixtures/demo_data.json
    #+end_src

    Initial demo data:
    - superuser
      - username: demo_admin
      - password: demo_pwd
    - normal user
      - username: demo_user
      - password: demo_pwd
    - project
      - project name: demo_project
** Deployment
*** Servers
    QFieldCloud is published on two servers:
    - https://dev.qfield.cloud/ This is a testing instance for new
      features. Every push into master will be automatically deployed
      on this server via a Github workflow.
    - https://app.qfield.cloud/ This is the production instance. At
      the moment the deploy is done manually.

    On the "dev" server the =docker-compose.dev.yml= is used. On the
    "app" server, the =docker-compose.prod.yml= is used. On the
    servers there are no mounted folders. To apply changes, the docker
    image must be re-build.
*** Infrastructure
   Based on this example
   https://testdriven.io/blog/dockerizing-django-with-postgres-gunicorn-and-nginx/
** Resources
   - [[https://qfield.cloud][QField Cloud "marketing" page]]
   - [[https://app.qfield.cloud/swagger/][API Swagger doc]]
   - [[http://status.qfield.cloud/][API status page]]

