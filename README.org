* Repository of QFieldcloud server
** Test instance
   A test instance is running on http://dev.qfield.cloud (78.47.109.156)
   The autogenerated REST API documentation is available on http://dev.qfield.cloud/docs
** Infrastructure
   Based on this example
   https://testdriven.io/blog/dockerizing-django-with-postgres-gunicorn-and-nginx/
*** Development
    To build development images and run the containers:
    #+begin_src sh
      docker-compose up -d --build
    #+end_src

    It will read =docker-compose.yml= and =.env.dev= and start a
    django built-in server at http://localhost:8000

    To run django commands on the docker, enter in the docker bash or
    postpone =docker-compose run web= to the commands, e.g.:
    #+begin_src sh
      docker-compose run web manage.py startserver
    #+end_src
*** Production
    To build production images and run the containers:
    #+begin_src sh
      docker-compose -f docker-compose.prod.yml up -d --build
    #+end_src

    It will read =docker-compose.prod.yml=, =.env.prod= and
    =.env.prod.db= and start a nginx server at http://localhost:1337

    Prod has no mounted folders. To apply changes, the image must be
    re-built.

    To collect static images:
    #+begin_src sh
      docker-compose -f docker-compose.prod.yml exec web python manage.py collectstatic --no-input --clear
    #+end_src

    To run a Django migration on db:
    #+begin_src sh
      docker-compose -f docker-compose.prod.yml exec web python manage.py migrate --noinput
    #+end_src

    To create a Django superuser
    #+begin_src sh
      docker-compose -f docker-compose.prod.yml exec web python manage.py createsuperuser
    #+end_src

** Technological stack
*** Django
    LTS (2.2)
*** Django REST framework
*** Python "official" docker image
    https://hub.docker.com/_/python
    =3.8-buster=
    See [[https://pythonspeed.com/articles/base-image-python-docker-images/][here]] why not use the alpine-based one.
*** Postgres
    https://hub.docker.com/_/postgres

    By docker "official" image =11=, I still don't use the 12 because
    of some incompatibilites with QGIS (at the moment)
*** Nginx
    Docker =1.17.5-alpine=
*** Gunicorn
    =19.9.0=
** API endpoints
    | HTTP Verb | Endpoint                                                           | Description                                                                 |
    |-----------+--------------------------------------------------------------------+-----------------------------------------------------------------------------|
    | GET       | =/users/=                                                          | Get all users (personal user accounts and organization accounts)            |
    | GET       | =/users/{name}/=                                                   | Get a single user (publicly information)                                    |
    | GET       | =/users/user/=                                                     | Get the authenticated user                                                  |
    | PATCH     | =/users/user/=                                                     | Update the authenticated user                                               |
    |           |                                                                    |                                                                             |
    | GET       | =/projects/=                                                       | List all public projectsitories                                             |
    | GET       | =/projects/user/=                                                  | List projects that the authenticated user has explicit permission to access |
    | POST      | =/projects/{owner}/=                                               | Create a new projects                                                       |
    | GET       | =/projects/{owner}/=                                               | List allowed projects of the specified user or organizazion                 |
    | GET       | =/projects/{owner}/{project}/=                                     | Get projects informations                                                   |
    | PATCH     | =/projects/{owner}/{project}/=                                     | Edit projects informations                                                  |
    | DELETE    | =/projects/{owner}/{project}/=                                     | Delete a projects                                                           |
    | POST      | =/projects/{owner}/{project}/transfer/=                            | Transfer a projects                                                         |
    | GET       | =/projects/{owner}/{project}/collaborators/=                       | List collaborators                                                          |
    | GET       | =/projects/{owner}/{project}/collaborators/{username}/=            | Check if a user is a collaborator                                           |
    | POST      | =/projects/{owner}/{project}/collaborators/{username}/=            | Add user as a collaborator                                                  |
    | DELETE    | =/projects/{owner}/{project}/collaborators/{username}/=            | Remove a user as a collaborator                                             |
    | POST      | =/projects/{owner}/{project}/push/=                                | Push/upload a file                                                          |
    | GET       | =/projects/{owner}/{project}/files/=                               | List project files (filename, size, sha)                                    |
    | GET       | =/projects/{owner}/{project}/{file}/=                              | Download a file                                                             |
    | DELETE    | =/projects/{owner}/{project}/{file}/=                              | Delete a file                                                               |
** Data model and entities
*** (User) Owner
    Organization is a user with type organization
    | Name       | Type   | Req. | Description              |
    |------------+--------+------+--------------------------|
    | id         | int    | t    | django auto generated id |
    | username   | string | t    | username                 |
    | password   | string | t    |                          |
    | type       | int    | t    | user / organization      |
    | email      | string |      | email adress             |
    | created_at | date   | auto |                          |
    | updated_at | date   | auto |                          |
*** Project
    A project represent the repository of the user's files
    A project can have only one QGIS project inside (qgs or qgz)

    | Name        | Type    | Req. | Description                                 |
    |-------------+---------+------+---------------------------------------------|
    | name        | string  | t    | name of the project                         |
    | description | string  |      | short description of the project            |
    | homepage    | string  |      | URL with more information about the project |
    | private     | boolean |      | Default: false                              |
    | owner       | FK      | t    | user / organization                         |
    | created_at  | date    | auto |                                             |
    | updated_ad  | date    | auto |                                             |
*** Project roles
    | Name    | Type | Req. | Description          |
    |---------+------+------+----------------------|
    | user    | FK   | t    |                      |
    | project | FK   | t    |                      |
    | role    | int  | t    | admin / read / write |

    A collaborator of an normal user project can only be reporter or
    reader. Editor or manager can only be set to an organization's project.
*** Organization roles
    # TODO: complete
    A user can have a role in a organization:
    - admin, se she can create projects and define organization roles for other users
    - collaborator (difference compared to an other user is for billing reasons)
*** Roles
    A higher role always include also the lowest ones

    | Name     | Description                                                                                |
    |----------+--------------------------------------------------------------------------------------------|
    | admin    | The owner of a project is always admin of the project. He can add and remove collaborators |
    | manager  | Can create new projects                                                                    |
    | editor   | Can edit data                                                                              |
    | reporter | Can only insert data (no update nor delete). (Don't have to be a collaborator?)            |
    | reader   | Can read data. (Don't have to be a collaborator?)                                          |
